package crud

import (
	"context"
	"database/sql"

	
	"github.com/goflower-io/xsql"

	{{- range $index,$table := . }}
   	"{{$table.RelativePath}}/crud/{{$table.PackageName}}"
	{{- end}}  

	 {{$ismysql :=  eq (index . 0).Dialect "mysql"}}
	 {{$ispg :=  eq (index . 0).Dialect "postgres"}}
	 {{$issqlite :=  eq (index . 0).Dialect "sqlite3"}}

	 {{if $ismysql}}"github.com/goflower-io/xsql/mysql"{{end}} 
	 {{if $ispg}}"github.com/goflower-io/xsql/postgres"{{end}} 
	 {{if $issqlite}}"github.com/goflower-io/xsql/sqlite3"{{end}}

)
	

type Client struct {
	config *xsql.Config
	db     *xsql.DB
	Master *ClientM
  debug bool
	{{- range $index,$table := . }}
   	{{$table.GoTableName}} *{{$table.GoTableName}}Client
	{{- end}} 
}

type ClientM struct{
	{{- range $index,$table := . }}
   	{{$table.GoTableName}} *{{$table.GoTableName}}Client
	{{- end}} 
}

func (c *Client) init() {
  	var eqx xsql.ExecQuerier
	var eqxm xsql.ExecQuerier
	eqx = c.db
	eqxm = c.db.Master()
	if c.debug {
		eqx = xsql.Debug(c.db)
		eqxm = xsql.Debug(c.db.Master())
	}

	{{- range $index,$table := . }}
   	c.{{$table.GoTableName}} =  &{{$table.GoTableName}}Client{eq: eqx, config: c.config}
	{{- end}} 
	c.Master = &ClientM{
	{{- range $index,$table := . }}
   		{{$table.GoTableName}}:  &{{$table.GoTableName}}Client{eq: eqxm, config: c.config},
	{{- end}} 	

	}
}

type Tx struct {
	config *xsql.Config
	tx     *sql.Tx

	{{- range $index,$table := . }}
   	{{$table.GoTableName}} *{{$table.GoTableName}}Client
	{{- end}} 
}

func (tx *Tx) init() {
	{{- range $index,$table := . }}
   	tx.{{$table.GoTableName}} =  &{{$table.GoTableName}}Client{eq: tx.tx, config: tx.config}
	{{- end}} 
}

func NewClient(config *xsql.Config,debug bool) (*Client, error) {
	db, err := {{if $ismysql}}mysql{{end}} {{if $ispg}}postgres{{end}} {{if $issqlite}}sqlite3{{end}}.NewDB(config)
	if err != nil {
		return nil, err
	}
	c := &Client{config: config, db: db,debug:debug}
	c.init()
	return c, nil
}

func NewClientWithDB(db *xsql.DB,debug bool)*Client{
	c := &Client{config:db.Config(),db:db,debug:debug}
	c.init()
	return c 
}

func (c *Client) Begin(ctx context.Context) (*Tx, error) {
	return c.BeginTx(ctx, nil)
}

func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	tx, err := c.db.Master().BeginTx(ctx, opts)
	if err != nil {
		return nil, err
	}
	t := &Tx{tx: tx, config: c.config}
	t.init()
	return t, nil
}

func (tx *Tx) Rollback() error {
	return tx.tx.Rollback()
}

func (tx *Tx) Commit() error {
	return tx.tx.Commit()
}


{{- range $index,$table := . }}
type {{$table.GoTableName}}Client struct {
	eq     xsql.ExecQuerier
	config *xsql.Config
}
func (c *{{$table.GoTableName}}Client) Find()  *xsql.SelectExecutor[*{{$table.PackageName}}.{{$table.GoTableName}}]  {
	return {{$table.PackageName}}.Find(c.eq).Timeout(c.config.QueryTimeout)
}

func (c *{{$table.GoTableName}}Client) Create() *{{$table.PackageName}}.Creater {
	a := {{$table.PackageName}}.Create(c.eq)
	a.Timeout(c.config.ExecTimeout)
	return a
}

func (c *{{$table.GoTableName}}Client) Update() *{{$table.PackageName}}.Updater {
	a := {{$table.PackageName}}.Update(c.eq)
	a.Timeout(c.config.ExecTimeout)
	return a
}

func (c *{{$table.GoTableName}}Client) Delete()  *xsql.DeleteExecutor[*{{$table.PackageName}}.{{$table.GoTableName}}]{
	return {{$table.PackageName}}.Delete(c.eq).Timeout(c.config.ExecTimeout)
}


{{- end}} 

