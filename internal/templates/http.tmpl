
package service

import (
	"encoding/json"
	"net/http"

	h1 "github.com/goflower-io/golib/net/http"

	"{{.RelativePath}}/api"
	"{{.RelativePath}}/views"
)

{{ $pkgName := .PackageName}}
{{ $tableName := .GoTableName}}

type {{.GoTableName}}Handler struct {
	api.{{.GoTableName}}ServiceServer
	Error   func(w http.ResponseWriter, statusCode int, err error)
	Success func(w http.ResponseWriter, msg string)
}

func New{{.GoTableName}}Handler(s api.{{.GoTableName}}ServiceServer) *{{.GoTableName}}Handler {
	h := &{{.GoTableName}}Handler{
		{{.GoTableName}}ServiceServer: s,
		Error: func(w http.ResponseWriter, statusCode int, err error) {
			w.WriteHeader(statusCode)
			w.Write([]byte(err.Error()))
		},
		Success: func(w http.ResponseWriter, msg string) {
			w.Write([]byte(msg))
		},
	}
	return h
}

func (h *{{.GoTableName}}Handler) AddPath(addPathFn func(method, path string, hf http.HandlerFunc)) {
	addPathFn(http.MethodGet, api.{{.GoTableName}}Service_Create{{.GoTableName}}_FullMethodName, h.Create{{.GoTableName}}Handle)
	addPathFn(http.MethodPut, api.{{.GoTableName}}Service_Create{{.GoTableName}}_FullMethodName, h.Create{{.GoTableName}}Handle)

	addPathFn(http.MethodGet, api.{{.GoTableName}}Service_Get{{.GoTableName}}_FullMethodName, h.Get{{.GoTableName}}Handle)
	addPathFn(http.MethodDelete, api.{{.GoTableName}}Service_Delete{{.GoTableName}}_FullMethodName, h.Delete{{.GoTableName}}Handle)

	addPathFn(http.MethodGet, api.{{.GoTableName}}Service_Update{{.GoTableName}}_FullMethodName, h.Update{{.GoTableName}}Handle)
	addPathFn(http.MethodPost, api.{{.GoTableName}}Service_Update{{.GoTableName}}_FullMethodName, h.Update{{.GoTableName}}Handle)

	addPathFn(http.MethodGet, api.{{.GoTableName}}Service_List{{.GoTableName}}s_FullMethodName, h.List{{.GoTableName}}sHandle)
}

func (h *{{.GoTableName}}Handler) List{{.GoTableName}}sHandle(w http.ResponseWriter, req *http.Request) {
	reqb := new(api.List{{.GoTableName}}sReq)
	if err := h1.GetRequestParams(reqb, req); err != nil {
		h.Error(w, http.StatusBadRequest, err)
		return
	}
	resp, err := h.{{.GoTableName}}ServiceServer.List{{.GoTableName}}s(req.Context(), reqb)
	if err != nil {
		h.Error(w, http.StatusInternalServerError, err)
		return
	}
	switch h1.ResponseConentType(req) {
	case h1.ResponseJSON:
		d, _ := json.Marshal(resp)
		w.Write(d)
	case h1.ResponseHTMX:
		views.{{.GoTableName}}ListView(resp,req.URL.Path,req.Form).Render(req.Context(), w)
	case h1.ResponseHTML:
		views.{{.GoTableName}}ListPage(resp,req.URL.Path,req.Form).Render(req.Context(), w)
	}
}

func (h *{{.GoTableName}}Handler) Get{{.GoTableName}}Handle(w http.ResponseWriter, req *http.Request) {
	reqb := new(api.{{.GoTableName}}Id)
	if err := h1.GetRequestParams(reqb, req); err != nil {
		h.Error(w, http.StatusBadRequest, err)
		return
	}
	resp, err := h.{{.GoTableName}}ServiceServer.Get{{.GoTableName}}(req.Context(), reqb)
	if err != nil {
		h.Error(w, http.StatusInternalServerError, err)
		return
	}
	switch h1.ResponseConentType(req) {
	case h1.ResponseJSON:
		d, _ := json.Marshal(resp)
		w.Write(d)
	case h1.ResponseHTMX:
		views.{{.GoTableName}}DetailView(resp).Render(req.Context(), w)
	case h1.ResponseHTML:
		views.{{.GoTableName}}DetailPage(resp).Render(req.Context(), w)
	}
}

func (h *{{.GoTableName}}Handler) Update{{.GoTableName}}Handle(w http.ResponseWriter, req *http.Request) {
	if req.Method == http.MethodGet {
		reqb := new(api.{{.GoTableName}}Id)
		if err := h1.GetRequestParams(reqb, req); err != nil {
			h.Error(w, http.StatusBadRequest, err)
			return
		}
		resp, err := h.{{.GoTableName}}ServiceServer.Get{{.GoTableName}}(req.Context(), reqb)
		if err != nil {
			h.Error(w, http.StatusInternalServerError, err)
			return
		}
		switch h1.ResponseConentType(req) {
		case h1.ResponseHTMX:
			views.{{.GoTableName}}UpdateView(resp).Render(req.Context(), w)
		default:
			views.{{.GoTableName}}UpdatePage(resp).Render(req.Context(), w)
		}
		return
	}
	reqb := new(api.Update{{.GoTableName}}Req)
	if err := h1.GetRequestParams(reqb, req); err != nil {
		h.Error(w, http.StatusBadRequest, err)
		return
	}
	_, err := h.{{.GoTableName}}ServiceServer.Update{{.GoTableName}}(req.Context(), reqb)
	if err != nil {
		h.Error(w, http.StatusInternalServerError, err)
		return
	}
	h.Success(w, "{{.GoTableName}} Updated")
}

func (h *{{.GoTableName}}Handler) Delete{{.GoTableName}}Handle(w http.ResponseWriter, req *http.Request) {
	reqb := new(api.{{.GoTableName}}Id)
	if err := h1.GetRequestParams(reqb, req); err != nil {
		h.Error(w, http.StatusBadRequest, err)
		return
	}
	_, err := h.{{.GoTableName}}ServiceServer.Delete{{.GoTableName}}(req.Context(), reqb)
	if err != nil {
		h.Error(w, http.StatusInternalServerError, err)
		return
	}
	h.Success(w, "{{.GoTableName}} Deleted")
}

func (h *{{.GoTableName}}Handler) Create{{.GoTableName}}Handle(w http.ResponseWriter, req *http.Request) {
	if req.Method == http.MethodGet {
		switch h1.ResponseConentType(req) {
		case h1.ResponseHTMX:
			views.{{.GoTableName}}CreateView().Render(req.Context(), w)
		default:
			views.{{.GoTableName}}CreatePage().Render(req.Context(), w)
		}
		return
	}
	reqb := new(api.{{.GoTableName}})
	if err := h1.GetRequestParams(reqb, req); err != nil {
		h.Error(w, http.StatusBadRequest, err)
		return
	}
	_, err := h.{{.GoTableName}}ServiceServer.Create{{.GoTableName}}(req.Context(), reqb)
	if err != nil {
		h.Error(w, http.StatusInternalServerError, err)
		return
	}
	h.Success(w, "{{.GoTableName}} Created")
}
